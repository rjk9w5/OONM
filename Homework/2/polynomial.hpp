//////////////////////////////////////////////////////////////////////
/// @file polynomial.hpp
/// @author Ryan John Krattiger
/// @brief File contains declarations for a polynomial class
////////////////////////////////////////////////////////////////////// 

#ifndef POLYNOMIAL_HPP_
#define POLYNOMIAL_HPP_

//////////////////////////////////////////////////////////////////////
/// @class Polynomial
/// @brief Encapsulation of a polynomial
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn Polynomial()
/// @brief Default Constructor for Polynomial object
/// @pre None
/// @post Initializes an empty Polynomial object
////////////////////////////////////////////////////////////////////// 

//////////////////////////////////////////////////////////////////////
/// @fn Polynomial(const Polynomial<T>& src)
/// @brief Copy constructor for Polynomial object
/// @pre Input must be a Polynomial object
/// @post Initializes a copy of Polynomial object
/// @param Polynomial object to be copied
////////////////////////////////////////////////////////////////////// 

//////////////////////////////////////////////////////////////////////
/// @fn Polynomial(const Polynomial<T>& src)
/// @brief Copy constructor for Polynomial object
/// @pre Input must be a pointer. src[0] will correspond to the 
///  polynomial term of order 0 and src[1] to order 1 and so on.
/// @post Initializes Polynomial object from an input array
/// @param Pointer of type T containing coefficients to polynomial
////////////////////////////////////////////////////////////////////// 

//////////////////////////////////////////////////////////////////////
/// @fn operator +=
/// @brief Plus equals operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator +
/// @brief Addition operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator -=
/// @brief Minus equals operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator -
/// @brief Subtraction operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator -
/// @brief Unary negation operator
/// @pre 
/// @post 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator ~
/// @brief Negation operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator ==
/// @brief Equality operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator !=
/// @brief Non-equality operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator =
/// @brief Assignment operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator [] const
/// @brief Bracket accessor
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator []
/// @brief Bracket mutator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn operator ()
/// @brief Functor for polynomial evaluation
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn (friend) operator <<
/// @brief Output operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn (friend) operator >>
/// @brief Input operator
/// @pre 
/// @post 
/// @param 
/// @return 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn (private) polycpy
/// @brief Helper function to copy polynomials safely
/// @pre 
/// @post updates class m_coeff and m_order pointers
/// @param pointer to array containing coefficient of nth term
/// @param pointer to array containing order of the nth term
/// @return none
//////////////////////////////////////////////////////////////////////

template <class T>
class Polynomial
{
  public:
    Polynomial();
    Polynomial(const Polynomial<T>& src);
    Polynomial(const T* coeff, const int order);
    
    // Operator Overloads
    Polynomial<T>& operator+=(const Polynomial<T>& rhs);
    Polynomial<T>& operator+(const Polynomial<T>& rhs) const;
    Polynomial<T>& operator-=(const Polynomial<T>& rhs);
    Polynomial<T>& operator-(const Polynomial<T>& rhs) const;
    
    Polynomial<T>& operator-() const;
    Polynomial<T>& operator~() const;
    
    bool operator==(const Polynomial<T>& rhs, const Polynomial<T>& lhs) const;
    bool operator!=(const Polynomial<T>& rhs, const Polynomial<T>& lhs) const;
    
    Polynomial<T>& operator=(const Polynomial<T>& rhs);
    
    T& operator[](const int i);
    const T& operator[](const int i) const;
    T& operator()(const T& x) const;
    
    // Friends
    friend ostream& operator<<(ostream& out, const Polynomial<T>& p);
    friend ostream& operator>>(istream& in, Polynomial<T>& p);
    
  private:
    int m_nterms;
    T* m_coeff; // Holds values of coefficients
    T* m_order; // Holds corresponding order of coefficients
    void polycpy(const T* src_order, const T*  src_coeff);
}

#include "polynomial.tpp"

#endif
